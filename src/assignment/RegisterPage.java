package assignment;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

public class RegisterPage implements ActionListener {
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == registerButton) {
            String username = usernameField.getText().trim();
            String password = new String(passwordField.getPassword()).trim();
            String email = emailField.getText().trim();
            String contactNumber = ValidationUtils.formatContactNumber(contactNumberField.getText().trim());
            String role = (String) roleSelector.getSelectedItem();
            String address = "";
            String roomType = "";

            if ("Resident".equals(role)) {
                String block = (String) blockSelector.getSelectedItem();
                String floor = (String) floorSelector.getSelectedItem();
                String number = (String) numberSelector.getSelectedItem();
                roomType = (String) roomTypeSelector.getSelectedItem();
                address = block + "_" + floor + "_" + number;
            }

            if (!ValidationUtils.validateInput(username, password, email, contactNumber, role, address)) return;

            if (ValidationUtils.checkForDuplicates(username, email, contactNumber, address, roomType, role)) return;

            if (registerUser(username, password, email, contactNumber, role, address, roomType)) {
                JOptionPane.showMessageDialog(frame, "Registration Successful!");
                frame.dispose();
                LoginPage loginpage = new LoginPage();
                loginpage.openLoginPage();
                FileHandler.writeSystemLog("(System) A registration request of " + role + " have been generated by " + username + ".");
            } else {
                JOptionPane.showMessageDialog(frame, "Registration Failed!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            frame.dispose(); // Close the current frame
            LoginPage loginPage = new LoginPage();
            loginPage.openLoginPage(); // Explicitly open the login page
        }
    }

    private JFrame frame;
    private JPanel panel;
    private JLabel usernameLabel, passwordLabel, emailLabel, contactNumberLabel, roleLabel, blockLabel, floorLabel, numberLabel, roomTypeLabel, paymentRateLabel;
    private JTextField usernameField, emailField, contactNumberField;
    private JPasswordField passwordField;
    private JComboBox<String> roleSelector, blockSelector, floorSelector, numberSelector, roomTypeSelector;
    private JButton registerButton, backButton;
    private JCheckBox showPasswordCheckbox;

    public void RegisterPage() {
        frame = new JFrame("Register Page");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 750);
        frame.setLayout(new BorderLayout());

        panel = new JPanel(null);
        panel.setBackground(Color.WHITE);
        createFormUI();

        frame.add(panel, BorderLayout.CENTER);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void createFormUI() {
        usernameLabel = new JLabel("Username:");
        passwordLabel = new JLabel("Password:");
        emailLabel = new JLabel("Email:");
        contactNumberLabel = new JLabel("Contact Number:");
        roleLabel = new JLabel("Role:");
        blockLabel = new JLabel("Block:");
        floorLabel = new JLabel("Floor:");
        numberLabel = new JLabel("Number:");
        roomTypeLabel = new JLabel("Room Type:");

        usernameField = new JTextField();
        passwordField = new JPasswordField();
        emailField = new JTextField();
        contactNumberField = new JTextField();

        roleSelector = new JComboBox<>(new String[]{"Resident", "Staff", "Manager"});
        roleSelector.addActionListener(e -> toggleAddressFields());

        blockSelector = new JComboBox<>(new String[]{"A", "B", "C"});
        floorSelector = new JComboBox<>();
        numberSelector = new JComboBox<>();
        roomTypeSelector = new JComboBox<>(new String[]{"Small Room", "Normal Room", "Master Room"});

        for (int i = 1; i <= 12; i++) {
            floorSelector.addItem(String.format("%02d", i));
        }
        for (int i = 1; i <= 20; i++) {
            numberSelector.addItem(String.format("%02d", i));
        }
        
        paymentRateLabel = new JLabel("Current Payment Rate: ");

        registerButton = new JButton("Register");
        backButton = new JButton("Back");

        int y = 60;
        usernameLabel.setBounds(50, y, 100, 30);
        usernameField.setBounds(160, y, 250, 30);

        passwordLabel.setBounds(50, y += 40, 100, 30);
        passwordField.setBounds(160, y, 250, 30);
        
        showPasswordCheckbox = new JCheckBox("Show Password");
        showPasswordCheckbox.setBounds(160, y += 30, 250, 30);
        showPasswordCheckbox.setBackground(Color.WHITE); // Optional: match panel background
        showPasswordCheckbox.addActionListener(e -> {
            if (showPasswordCheckbox.isSelected()) {
                passwordField.setEchoChar((char) 0); // Show password
            } else {
                passwordField.setEchoChar('*'); // Mask password
            }
        });

        emailLabel.setBounds(50, y += 40, 100, 30);
        emailField.setBounds(160, y, 250, 30);

        contactNumberLabel.setBounds(50, y += 40, 120, 30);
        contactNumberField.setBounds(160, y, 250, 30);

        roleLabel.setBounds(50, y += 40, 100, 30);
        roleSelector.setBounds(160, y, 250, 30);

        blockLabel.setBounds(50, y += 40, 100, 30);
        blockSelector.setBounds(160, y, 250, 30);

        floorLabel.setBounds(50, y += 40, 100, 30);
        floorSelector.setBounds(160, y, 250, 30);

        numberLabel.setBounds(50, y += 40, 100, 30);
        numberSelector.setBounds(160, y, 250, 30);

        roomTypeLabel.setBounds(50, y += 40, 100, 30);
        roomTypeSelector.setBounds(160, y, 250, 30);
        
        paymentRateLabel.setBounds(50, y += 40, 250, 30); 

        registerButton.setBounds(100, y += 60, 100, 30);
        backButton.setBounds(220, y, 100, 30);

        panel.add(usernameLabel);
        panel.add(usernameField);
        panel.add(passwordLabel);
        panel.add(passwordField);
        panel.add(emailLabel);
        panel.add(emailField);
        panel.add(contactNumberLabel);
        panel.add(contactNumberField);
        panel.add(roleLabel);
        panel.add(roleSelector);
        panel.add(blockLabel);
        panel.add(blockSelector);
        panel.add(floorLabel);
        panel.add(floorSelector);
        panel.add(numberLabel);
        panel.add(numberSelector);
        panel.add(roomTypeLabel);
        panel.add(roomTypeSelector);
        panel.add(paymentRateLabel);
        panel.add(registerButton);
        panel.add(backButton);
        panel.add(showPasswordCheckbox);
        
        paymentRateLabel.setText("Current Payment Rate: " + Payment.getPaymentRateByRoomType("Small Room"));
        
        roomTypeSelector.addActionListener(e -> {
            String selectedRoom = (String) roomTypeSelector.getSelectedItem();
            Double paymentRate = Payment.getPaymentRateByRoomType(selectedRoom);
            paymentRateLabel.setText("Current Payment Rate: " + paymentRate);
        });

        registerButton.addActionListener(this);
        backButton.addActionListener(this);
        toggleAddressFields();
    }

    private void toggleAddressFields() {
        boolean isResident = "Resident".equals(roleSelector.getSelectedItem());
        blockLabel.setVisible(isResident);
        blockSelector.setVisible(isResident);
        floorLabel.setVisible(isResident);
        floorSelector.setVisible(isResident);
        numberLabel.setVisible(isResident);
        numberSelector.setVisible(isResident);
        roomTypeLabel.setVisible(isResident);
        roomTypeSelector.setVisible(isResident);
        paymentRateLabel.setVisible(isResident);
    }
    
    private boolean registerUser(String username, String password, String email, String contactNumber, String role, String address, String roomType) {
        try (PrintWriter writer = new PrintWriter(new FileWriter("WaitingList.txt", true))) {
            writer.println(username);
            writer.println(password);
            writer.println(email);
            writer.println(contactNumber);
            writer.println(role);
            if ("Resident".equals(role)) {
                writer.println(address);
                writer.println(roomType);
            }
            writer.println();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "An error occurred while writing the 'WaitingList' file. Please check if the file exists and is accessible.", "File Writing Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
}
